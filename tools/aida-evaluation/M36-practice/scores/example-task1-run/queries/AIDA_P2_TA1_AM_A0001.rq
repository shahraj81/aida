PREFIX ldcOnt: <https://raw.githubusercontent.com/NextCenturyCorporation/AIDA-Interchange-Format/master/java/src/main/resources/com/ncc/aif/ontologies/LDCOntologyM36#>
PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX aida:  <https://raw.githubusercontent.com/NextCenturyCorporation/AIDA-Interchange-Format/master/java/src/main/resources/com/ncc/aif/ontologies/InterchangeOntology#>
PREFIX cfn:   <https://verdi.nextcentury.com/custom-function/>
PREFIX xsd:   <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT
       ?metatype
       ?subject
       ?predicate
       ?object
       ?predicate_justification
       (str(?_aa_cv) as ?argument_assertion_confidence)
       (str(?_edge_cj_cv) as ?predicate_justification_confidence)

WHERE {

    ?subject           a                             aida:SameAsCluster .
    ?subject           aida:prototype                ?subject_prototype .

    ?subject_prototype a                             ?metatype .

    ?object            a                             aida:SameAsCluster .
    ?object            aida:prototype                ?object_prototype .

    # Get the edge and it's justifications
    ?statement           rdf:subject                   ?subject_prototype .
    ?statement           rdf:predicate                 ?predicate .
    ?statement           rdf:object                    ?object_prototype .
    ?statement           aida:confidence               ?aa_confidence .
    ?aa_confidence       aida:confidenceValue          ?_aa_cv .
    ?statement           aida:justifiedBy              ?compoundedge_just .
    ?compoundedge_just   aida:confidence               ?edge_cj_confidence .
    ?edge_cj_confidence  aida:confidenceValue          ?_edge_cj_cv .
    ?compoundedge_just   aida:containedJustification   ?edge_justification .
    ?edge_justification  aida:sourceDocument           ?docid .
    ?edge_justification  aida:source                   ?doceid .

    OPTIONAL {
           ?edge_justification a                           aida:TextJustification .
           ?edge_justification aida:startOffset            ?ejso .
           ?edge_justification aida:endOffsetInclusive     ?ejeo
    }
    OPTIONAL {
           ?edge_justification a                           aida:ImageJustification .
           ?edge_justification aida:boundingBox            ?ejbb1  .
           ?ejbb1              aida:boundingBoxUpperLeftX  ?ejulx1 .
           ?ejbb1              aida:boundingBoxUpperLeftY  ?ejuly1 .
           ?ejbb1              aida:boundingBoxLowerRightX ?ejlrx1 .
           ?ejbb1              aida:boundingBoxLowerRightY ?ejlry1
    }
    OPTIONAL {
           ?edge_justification a                           aida:KeyFrameVideoJustification .
           ?edge_justification aida:keyFrame               ?ejkfid .
           ?edge_justification aida:boundingBox            ?ejbb2  .
           ?ejbb2              aida:boundingBoxUpperLeftX  ?ejulx2 .
           ?ejbb2              aida:boundingBoxUpperLeftY  ?ejuly2 .
           ?ejbb2              aida:boundingBoxLowerRightX ?ejlrx2 .
           ?ejbb2              aida:boundingBoxLowerRightY ?ejlry2
    }
    OPTIONAL {
           ?edge_justification a                           aida:ShotVideoJustification .
           ?edge_justification aida:shot                   ?ejsid
    }
    OPTIONAL {
           ?edge_justification a                           aida:AudioJustification .
           ?edge_justification aida:startTimestamp         ?ejst1 .
           ?edge_justification aida:endTimestamp           ?ejet1
    }
    OPTIONAL {
           ?edge_justification a                           aida:VideoJustification .
           ?edge_justification aida:startTimestamp         ?ejst2 .
           ?edge_justification aida:endTimestamp           ?ejet2
    }

    BIND( IF( BOUND(?ejsid), ?ejsid, "__NULL__") AS ?_ejsid) .
    BIND( IF( BOUND(?ejkfid), ?ejkfid, "__NULL__") AS ?_ejkfid) .
    BIND( IF( BOUND(?ejso), ?ejso, "__NULL__") AS ?_ejso) .
    BIND( IF( BOUND(?ejeo), ?ejeo, "__NULL__") AS ?_ejeo) .
    BIND( COALESCE(?ejst1, ?ejst2, "__NULL__") AS ?_ejst) .
    BIND( COALESCE(?ejet1, ?ejet2, "__NULL__") AS ?_ejet) .
    BIND( COALESCE(?ejulx1, ?ejulx2, "__NULL__") AS ?_ejulx) .
    BIND( COALESCE(?ejuly1, ?ejuly2, "__NULL__") AS ?_ejuly) .
    BIND( COALESCE(?ejlrx1, ?ejlrx2, "__NULL__") AS ?_ejlrx) .
    BIND( COALESCE(?ejlry1, ?ejlry2, "__NULL__") AS ?_ejlry) .

    BIND( cfn:getSpan(str(?docid), str(?doceid), str(?_ejsid), str(?_ejkfid), str(?_ejso), str(?_ejeo), str(?_ejulx), str(?_ejuly), str(?_ejlrx), str(?_ejlry), str(?_ejst), str(?_ejet) ) AS ?predicate_justification ) .
}

ORDER BY ?metatype ?subject ?predicate ?object ?predicate_justification ?argument_assertion_confidence ?predicate_justification_confidence
